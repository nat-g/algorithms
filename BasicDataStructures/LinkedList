#Singly Linked Lists

A linked list is a low-level data structure. It stores an ordered sequence of items in individual "node" objects 
that have pointers to other nodes.

In a singly-linked list, the nodes each have one pointer to the next node.

The node is where data is stored in the linked list.
In a linked list, the first node is called the head and the last node is called the tail.

My simple implementation of a linked list includes the following methods:
IsEmpty: checks if the liked list is empty
Add: inserts a new node into the list
Size: returns size of list
Search: searches list for a node containing the requested data and returns that node if found, otherwise raises an error
Remove: searches list for a node containing the requested data and removes it from list if found, otherwise raises an error

Often, our only connection to the list itself is a variable pointing to the head. From there we can walk down the list 
to all the other nodes.

Advantages of linked lists:
-Linked lists have constant-time insertions and deletions in any position (you just change some pointers). 
Arrays require O(n) time to do the same thing, because you'd have to "shift" all the subsequent items over 1 index.
-Linked lists can continue to expand as long as there is space on the machine. Arrays (in low-level languages) must 
have their size specified ahead of time. Even in languages with "dynamic arrays" that automatically resize themselves 
when they run out of space (like Python, Ruby and JavaScript), the operation to resize a dynamic array has a large 
cost which can make a single insertion unexpectedly expensive.

Disadvantages of linked lists:
-To access or edit an item in a linked list, you have to take O(i) time to walk from the head of the list to 
the i-th item (unless of course you already have a pointer directly to that item). Arrays have constant-time lookups 
and edits to the iith item.

#Doubly Link lists
Doubly linked list has pointers to the next and the previous nodes.
Doubly linked lists allow us to traverse our list backwards. In a singly linked list, if you just had a pointer to 
a node in the middle of a list, there would be no way to know what its previous node was. Not a problem in a doubly 
linked list.
